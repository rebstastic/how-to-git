How did viewing a diff between two versions of a file help you see the bug that
was introduced?

I could clearly see line differences in two files and compare them easily. Diff
command enabled me to focus only on the lines that are different. I can use diff
for comparing my output with expected output in my assignments.

---

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

I could experiment with code without any hesitations, knowing that I can come
back to "working stage" any time. If I'm collaborating, I can be more aware of
what my colleagues are doing and if that affects my work.

---

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
Docs does?

Good thing about choosing when to commit is having control in organizing my
project's history into meaningful chunks. Con is that I can overcommit or forget
to commit changes at a right time.

---

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Logical change in programming can affect multiple files.

---

How can you use the commands git log and git diff to view the history of files?

I can use git log to view all my commits in chronological order. I can use git
diff to compare one commit against another.

---

How might using version control make you more confident to make changes that
could break something?

I know that if I commit my changes often enough, I can checkout back to the
commit where everything was working. I would not hesitate to try out new things.

---

Now that you have your workspace set up, what do you want to try using Git for?

I want to use git for coding projects, article writing, thesis, assignments...
